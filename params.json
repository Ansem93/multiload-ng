{
  "name": "Multiload-ng",
  "tagline": "Modern graphical system monitor for XFCE/MATE/LXDE",
  "body": "# Multiload-ng\r\n\r\n## Overview\r\nMultiload-ng is a modern graphical system monitor. It's a near-complete rewrite of the good old GNOME multiload applet.\r\n\r\nIt supports the following panels:\r\n- XFCE (xfce4-panel)\r\n- LXDE (lxpanel)\r\n- MATE (mate-panel)\r\n- Standalone (has its own window, not embedded in any panel)\r\n\r\nMultiload-ng can be built with GTK2 and GTK3, so can be embedded within GTK2/GTK3 builds of all the panels above.\r\n\r\n\r\n\r\n## Contents\r\n- [Features](#features)\r\n- [Screenshots](#screenshots)\r\n- [The Graphs](#the-graphs)\r\n- [Color Schemes](#color-schemes)\r\n- [History](#history)\r\n- [System Requirements](#system-requirements)\r\n- [Install Instructions](#install-instructions)\r\n- [Build Instructions](#build-instructions)\r\n- [How to Contribute](#how-to-contribute)\r\n- [Help & Troubleshooting](#help--troubleshooting)\r\n- [FAQ](#faq)\r\n- [Credits](#credits)\r\n\r\n\r\n\r\n## Features\r\n- Draw graphs of system resources ([learn more](#the-graphs))\r\n- Customizable under every aspect\r\n- Builtin color schemes ([learn more](#color-schemes))\r\n- Independent configuration for each graph\r\n- Automatically adapts to container changes (panel or window)\r\n- Written in pure C with few dependencies = little CPU/memory footprint\r\n- Customizable tooltips with lots of information\r\n- Customizable mouse actions, with user-defined command lines\r\n- Customizable graph scale\r\n- Customizable data sources (filters)\r\n\r\n\r\n\r\n## Screenshots\r\n![Default configuration, small panel. All graphs visible](screenshots/all.panel-24px.png?raw=true)  \r\n<sup>*Small panel, default configuration. All graphs visible*</sup>\r\n\r\n![All graphs visible, larger panel. Thicker (2px) borders, graphs have different widths](screenshots/all.panel-40px.border-2px.widths.png?raw=true)  \r\n<sup>*All graphs visible, larger panel. Thicker (2px) borders, graphs have different widths*</sup>\r\n\r\n![Each graph has different border width. Color scheme: Uranus](screenshots/borders.uranus.png?raw=true)  \r\n<sup>*Each graph has different border width. Color scheme: __Uranus__*</sup>\r\n\r\n![Graphs have no borders. Extra spacing and padding. Color scheme: Solarized Light](screenshots/margin.padding.noborder.solarized-light.png?raw=true)  \r\n<sup>*Graphs have no borders. Extra spacing and padding. Color scheme: __Solarized Light__*</sup>\r\n\r\n![Graph background matches panel background. Very stylish](screenshots/background-blend.png?raw=true)  \r\n<sup>*Graph background matches panel background. Very stylish*</sup>\r\n\r\n![Graphs have vertical orientation on horizontal panel. The opposite is also possible](screenshots/vertical-on-horizontal.png?raw=true)  \r\n<sup>*Graphs have vertical orientation on horizontal panel. The opposite is also possible*</sup>\r\n\r\n![Graphs are contiguous, with no border and no spacing, behaving like a single graph. Color scheme: Jupiter](screenshots/contiguous.noborder.jupiter.png?raw=true)  \r\n<sup>*Graphs are contiguous, with no border and no spacing, behaving like a single graph. Color scheme: __Jupiter__*</sup>\r\n\r\n![Just CPU graph. Color scheme: Ubuntu Ambiance](screenshots/cpu.ambiance.png?raw=true)  \r\n<sup>*Just CPU graph. Color scheme: __Ubuntu Ambiance__*</sup>\r\n\r\n![Standalone window, horizontal layout. Color scheme: Fruity](screenshots/standalone.horizontal.fruity.png?raw=true)  \r\n<sup>*Standalone window, horizontal layout. Color scheme: __Fruity__*</sup>\r\n\r\n![Standalone window, vertical layout. Color scheme: Numix Light](screenshots/standalone.vertical.numix-light.png?raw=true)  \r\n<sup>*Standalone window, vertical layout. Color scheme: __Numix Light__*</sup>\r\n\r\n\r\n\r\n## The Graphs\r\n### CPU\r\nDraws CPU usage, differentiating between cycles used by programs with normal and\r\nlow priority, by the kernel and waiting for I/O to complete.\r\n\r\nTooltip shows CPU information (model, cores, frequency/governor).\r\n\r\n### MEMORY\r\nDraws RAM usage, differentiating between memory used by the applications (directly\r\nand through shared modules) and memory used as cache/buffers.\r\n\r\nTooltip prints these values as percentage and absolute value.\r\n\r\n### NETWORK\r\nDraws network I/O of every supported network interface, differentiating between\r\ninput, output and local (loopback, ADB, etc) traffic.\r\n\r\nUser can choose which interfaces will be used for graph calculations.\r\n\r\n### SWAP\r\nDraws swap usage, when swap is present.\r\n\r\n### LOAD AVERAGE\r\nDraws load average, as returned by `uptime`.\r\n\r\nTooltip shows load average of 1,5,15 minutes, number of active processes/threads\r\nand informations about currently running kernel.\r\n\r\n### DISK\r\nDraws Disk I/O, differentiating between read and write speeds.\r\n\r\nUser can choose which partitions will be used for graph calculations.\r\n\r\n### TEMPERATURE\r\nDraws temperature of the system\r\n\r\nUser can choose which sensor/driver to read for drawing the graph, or let Multiload-ng \r\nautomatically select the hottest temperature measured among all detected sensors.\r\n\r\n### PARAMETRIC\r\nDraws numeric output of user defined command line. Up to 4 values will be shown together.  \r\nCan be also used to monitor changes to a file using `cat <filename>` as command line.  \r\nCan be also used to execute arbitrary shell commands using `sh -c \"<commands>\"` as command line.\r\n\r\nTooltip shows contents of command's *stderr*.\r\n\r\n### Stay tuned\r\nOther graphs are coming!\r\n\r\n\r\n\r\n## Color Schemes\r\nMultiload-ng has color scheme support, that is, every color of the graphs can be changed.\r\nThis include borders and background (two-color gradient).\r\n\r\nColors (except for border and background) have alpha values, so you can play with\r\ntransparency too!\r\n\r\nThere are also some builtin color schemes, which you can set with a single click.\r\nSome examples are present in [screenshots](#screenshots) above. Here is a partial list:\r\n- **Default color scheme** with its distinctive colors\r\n- **Tango** from [Tango Desktop Project](http://tango.freedesktop.org/)\r\n- **Solarized** by [Ethan Schoonover](http://ethanschoonover.com/solarized) in both Light and Dark variants\r\n- Color schemes inspired by famous Linux distribution: **[Ubuntu](http://www.ubuntu.com/)** (both Ambiance and Radiance), **[Linux Mint](https://www.linuxmint.com/)**\r\n- Color schemes inspired by famous GTK themes: **[Numix](https://numixproject.org/)** (both Light and Dark), **[Arc](https://github.com/horst3180/arc-theme)**\r\n- Color schemes inspired by outer space: **Moon**, **Venus**, **Earth**, **Mars**, **Jupiter**, **Uranus**, **Neptune**\r\n- More!\r\n\r\n\r\n\r\n## History\r\nMultiload-ng started as a simple port of multiload-nandhp to lxpanel>0.7.\r\nAs I become familiar with code, I started making other little changes, and cleaning the code.\r\nI then contacted original author, but received no reply - meanwhile the plugin continued improving.\r\n\r\nThis came to the point where the changes became many and deep, and I realized that this wasn't the same project anymore.\r\nI knew that a fresh start would give a boost to development, and at the same time it\r\nwould allow to choose future directions with more ease.\r\n\r\nFor the above reasons, I made Multiload-ng a separate project.\r\nThe name changes too (so the filenames), in order to allow them to be installed together.\r\n\r\nMultiload-ng gained popularity starting from version 1.1.0, that introduced GTK3 support. Some Linux bloggers\r\nstarted writing about the plugin, and some contributors started to send translation in their languages.\r\n\r\nAll this keeps the author motivated, and the project alive and kicking!\r\n\r\n\r\n\r\n## System Requirements\r\n### Common requirements\r\nThese are the packages required to build any version of the plugin.\r\nSee per-panel section below for full list.\r\n\r\nPackage                     | Min version\r\n:-------------------------- | -------------:\r\ngtk+                        | >= 2.18.0\r\ncairo                       | >= 1.0\r\n\r\nMultiload-ng requires a reasonably recent Linux kernel (>2.6.36) built with\r\nspecific configuration options. These are not build-time requirement, rather\r\nrun-time ones. Here are required options:  \r\n- **CONFIG_SYSFS** *(sysfs filesystem support)*\r\n- **CONFIG_PROC_FS** *(/proc filesystem support)*\r\n\r\nMultiload-ng measures system resources using nodes in /sys and /proc, so they must exist.\r\n\r\nIn addition, enabling the following options allows Multiload-ng to gather all possible\r\ninformations from the system. These are not strictly required, but some graphs might\r\nnot work properly, or not work at all, without these other options:  \r\n- **CONFIG_CPU_FREQ** *(CPU Frequency scaling)*\r\n- **CONFIG_HWMON** *(Hardware Monitoring support)*\r\n- **CONFIG_THERMAL** *(Generic Thermal sysfs driver)*\r\n- __CONFIG_SENSORS_*__ - enable sensors you need\r\n\r\nAny modern kernel (since 2010) sets all these options automatically, so generally\r\nspeaking you don't have to worry about user kernels.\r\n\r\n### Requirements for standalone window\r\nStandalone target has no additional requirements.\r\n\r\n### Requirements for LXDE panel\r\nIn addition to common requirements (see above)\r\nthese packages are required to build LXDE panel plugin:\r\n\r\nPackage                     | Min version\r\n:-------------------------- | -------------:\r\nlxpanel                     | >= 0.7.0\r\nlibfm                       | >= 1.2.0\r\n\r\nDue to an error in lxpanel source, if you are using lxpanel 0.7.0 you will\r\nneed also libmenu-cache. This was fixed in version 0.7.1. Read about this\r\n[here](http://wiki.lxde.org/en/How_to_write_plugins_for_LXPanel#Preconditions).\r\n\r\nYou will have to force GTK+2 build (see [here](#gtk-version) for instructions).\r\n\r\nNote that LXDE 0.7 or greater is required.\r\n\r\n### Requirements for MATE panel\r\nIn addition to common requirements (see above)\r\nthese packages are required to build MATE panel plugin:\r\n\r\nPackage                     | Min version\r\n:-------------------------- | -------------:\r\nlibmatepanelapplet-4        | >= 1.7.0\r\n\r\nCheck which GTK+ version is supported by your panel: mate-panel used to be GTK+2,\r\nnewer versions of mate-panel are GTK+3. You may have to set correct GTK+ version\r\n(see [here](#gtk-version) for instructions).\r\n\r\nNote that MATE 1.7 or greater is required.\r\n\r\n### Requirements for XFCE panel\r\nIn addition to common requirements (see above)\r\nthese packages are required to build XFCE panel plugin:\r\n\r\nPackage                     | Min version\r\n:-------------------------- | -------------:\r\nlibxfce4panel               | >= 4.6.0\r\nlibxfce4util                | >= 4.6.0\r\nlibxfce4ui-1 OR libxfcegui4 | >= 4.8.0\r\n\r\nCheck which GTK+ version is supported by your panel: xfce4-panel used to be GTK+2\r\nonly, newer versions of xfce4-panel supports GTK+3 too. You may have to set\r\ncorrect GTK+ version (see [here](#gtk-version) for instructions).\r\n\r\nNote that XFCE 4.6 or greater is required.\r\n\r\n\r\n\r\n## Install instructions\r\n\r\n- For Debian and its derivatives (Ubuntu, Mint...) **stable** packages for all supported panels are available in [WebUpd8 PPA](https://launchpad.net/~nilarimogard/+archive/ubuntu/webupd8). Read how to install [here](http://www.webupd8.org/2016/08/multiload-ng-120-released-with-color.html).\r\n- Arch users can install XFCE version from AUR ([stable](https://aur.archlinux.org/packages/xfce4-multiload-ng-plugin/), [unstable](https://aur.archlinux.org/packages/xfce4-multiload-ng-plugin/))\r\n- Other distro users will have to [build from source](#build-instructions).\r\n\r\nIf you want to try lastest features, or have some control over build (e.g. enable/disable some panels), you can [build it yourself](#build-instructions).\r\n\r\n\r\n\r\n## Build Instructions\r\n\r\n### Get the source\r\nExecute the following command line (you must have git installed):  \r\n`git clone https://github.com/udda/multiload-ng`\r\n\r\nIf you don't have git, download the lastest source ZIP [here](https://github.com/udda/multiload-ng/archive/master.zip).\r\n\r\nOr, if you don't want any surprise, download a stable release [here](https://github.com/udda/multiload-ng/releases).\r\n\r\n### Configure\r\nMove to the directory that contains source code just cloned and run:  \r\n`./autogen.sh`\r\n\r\nNow run configure script:  \r\n`./configure --prefix=/usr`  \r\nChange prefix as needed (/usr is the default of most distros and it's just OK; if not specified it defaults to /usr/local).\r\n\r\nLubuntu users (and possibly others) have different libraries location. They may have to set directly *libdir*:  \r\n`./configure --libdir=/usr/lib/x86_64-linux-gnu`  \r\nIf plugin does not show up in the list of panel plugins, you could try to repeat build process with this configure setting.\r\n\r\n### GTK version\r\nBuild system automatically selects highest GTK+ version available. If you need to build against a lower version, you have to\r\nset it manually (see next section, [Advanced configure](#advanced-configure))\r\n\r\nFor example, LXDE panel and older versions of XFCE panel (< 4.12.0) need GTK2 version of the plugin.\r\nThey need to add option `--with-gtk=2.0` to *./configure*.\r\n\r\n### Advanced configure\r\nIf you are ok with default settings, you can skip this paragraph and head to [Build](#build) section. Otherwise, continue reading.\r\n\r\nConfigure script automatically detects installed panels (and related development packages) and enables panel plugins accordingly. You can force enable/disable them using `--with-PLUGIN`, `--without-PLUGIN` or `--with-PLUGIN=yes|no` (replace `PLUGIN` accordingly)\r\n\r\nMultiload-ng's ./configure has some extra options:  \r\n\r\nOption                      | Description                          | Note\r\n--------------------------- | ------------------------------------ | ---------\r\n`--with-gtk=2.0|3.0|auto`   | GTK+ version to compile against      | Remember to set same GTK+ version of the target panel! Otherwise you could get linking or runtime errors.\r\n`--disable-deprecations`    | Disable GDK/GTK deprecation warnings | Useful when build system enforces *-Werror*. Some deprecated symbols does not have adequate replacement yet.\r\n`--enable-experimental`     | Compile in experimental code         | May be unstable/malfunctioning. Only for testing/developing purposes.\r\n`--enable-debug`            | Allows debugging with GDB            | This enables required CFLAGS.\r\n`--enable-profiling`        | Allows profiling with gprof          | This enables required CFLAGS\r\n\r\nTo get a list of all available options, type:  \r\n`./configure --help`\r\n\r\nWhen you are satisfied with your flags, run `./configure` with selected options.\r\n\r\n### Build\r\nThis is simple. Move to the directory that contains source code and execute:  \r\n`make`\r\n\r\n### Install/uninstall\r\nTo install (must run `make` before), execute:  \r\n`sudo make install`\r\n\r\nTo later uninstall you need source directory. If you deleted it, just download again, and run [Configure](#configure) part. Then execute:  \r\n`sudo make uninstall`\r\n\r\n\r\n\r\n## How to Contribute\r\nYou can contribute in several ways:\r\n\r\n* Suggest new features\r\n* Report bugs\r\n* Translate to new languages\r\n* Port the plugin to other panels\r\n* Submit your personal color scheme\r\n* Implement something present in the [Wishlist](../../wiki/Wishlist)\r\n* Fix something present in [Known issues and TODO](../../wiki/Known-issues-and-TODO)\r\n* ...\r\n\r\nLook at the [Wiki](../../wiki), contains all the informations you will need.\r\n\r\nEach pull request will be considered and will get a response.\r\n\r\n\r\n\r\n\r\n## Help & Troubleshooting\r\nLook at the [FAQ](#faq) for some common pitfalls. All additional documentation is located in the [Wiki](../../wiki).\r\n\r\n### Plugin shows only a vertical blank line\r\nProbably you compiled against the wrong GTK+ version. E.g: LXDE panel and older version of XFCE panel (< 4.12.0)\r\nare still GTK2-based, and Multiload-ng build system automatically selects GTK+3 if available.\r\n\r\nTry running Configure with the right options (see [Configure](#configure) section above)\r\n\r\n### High CPU usage\r\nThis has basically two causes:  \r\n* low update interval\r\n* parametric command\r\n\r\nLowering update interval means more redraws per second. CPU usage might become noticeable on older systems.\r\n\r\nCommand line of parametric graph is called synchronously every time the graph is redrawn. This means that\r\nplugins hangs waiting for the command line to terminate and return numbers. You should try to\r\n\r\n\r\n\r\n\r\n## FAQ\r\n\r\n### Q: Which are the differences with original Multiload applet?\r\nA: First of all, this project is *forked* from original Multiload. Nearly 100% of the code has been\r\nrewritten by now, but Multiload-ng is designed to keep ALL the features of the original multiload,\r\nand extend them.\r\n\r\nThere are some notable differences:\r\n\r\n* Original multiload contains old and unmantained code, Multiload-ng is actively mantained\r\n* Multiload-ng has a [Wiki](../../wiki)!\r\n* Multiload-ng runs on a variety of panels, including those of the original multiload\r\n* Multiload-ng recently dropped glibtop dependency, meaning less bugs and less overhead\r\n* Multiload-ng detects automatically which task manager is installed\r\n* Multiload-ng has additional graphs, and more will be added in the future\r\n* Multiload-ng has more graphical customizations, like individual size/interval/border\r\n* Multiload-ng has color schemes support\r\n* Multiload-ng responds to mouse events with per-graph customizable actions\r\n* Multiload-ng can choose its orientation regardless of panel orientation\r\n* Multiload-ng can set graphs scale manually\r\n* Multiload-ng has higher limits for graph size and update interval\r\n* Multiload-ng can also be run without any panel\r\n* Multiload-ng can filter which source to show in suitable graphs\r\n* ...and so on\r\n\r\nNot enough? Try it in your system and you won't come back!\r\n\r\n### Q: Doesn't a system monitor use system resources by itself?\r\nA: Yes. This is true for every system monitor. That's why resources usage from Multiload-ng is kept to a negligible level.\r\n\r\n### Q: I found a bug/I have a suggestion! How can I report?\r\nA: The preferred way to report a bug or suggest new features is by [creating a new issue](../../issues/new).\r\n\r\nFirst, check wether the bug/suggestion is already present in [issues list](../../issues) or in the project [Wishlist](../../wiki/Wishlist).\r\nIf it's not, you should [create a new issue](../../issues/new).\r\n\r\n### Q: Will you continue the development of Multiload-ng?\r\nA: Of course! To get an idea of future directions, take a look at the [Wishlist](../../wiki/Wishlist).\r\n\r\n### Q: Why don't you port to panel *\\[insertyourpanelhere\\]*?\r\nA: Because of a number of reasons:\r\n\r\n1. I don't have the time -> Will be done when I find some time\r\n2. I don't have required knowledge -> Will be done when I learn it\r\n3. I didn't know that *\\[insertyourpanelhere\\]* existed/supported plugins -> Now I know, I'll investigate and eventually you will have your plugin\r\n4. Requires too much work -> If it's worth it, see #1\r\n5. Requires plugins to be written in languages other than C -> Sorry, this would break ALL existing plugins. Unless special cases (like supersets of C or simple wrappers), it's very likely it can't be done.\r\n\r\nThe best way to get a new port is to suggest it (or code it yourself, of course). Feel free to submit an issue about your request, it will be considered carefully.\r\n\r\n\r\n\r\n## Credits\r\n- FSF and creators of original Multiload applet (see AUTHORS file), for giving me a starting point\r\n- Translators, for sending me always up-to-date translations. Read their names in *About* dialog, in git commits comments, or looking at the source, in the PO file headers\r\n- Beta testers, for reporting bugs that I would have never discovered, because they didn't happen in any of my systems. Now these bugs are all gone, thanks to them. Some translators also helped me with testing.\r\n\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}